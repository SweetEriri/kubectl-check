#!/bin/bash

######################################################################################################
#
#Author         : lework
#Description    : Check if all pods in Kubernetes deployment are ready.
#Update Date    : 2019-08-23 10:00
#
######################################################################################################

set -o errexit          # Exit on most errors (see the manual)
set -o errtrace         # Make sure any error trap is inherited
set -o nounset          # Disallow expansion of unset variables
set -o pipefail         # Use last non-zero exit code in a pipeline


######################################################################################################
# environment configuration
######################################################################################################

namespace="default"       # 命名空间
deploy_name=""            # deploy名称
check_interval=2          # 检查间隔
check_num=60              # 检查次数
check_result=false        # 检查结果

[[ ${COLOR_RED-} ]]    || COLOR_RED="\e[1;31m"
[[ ${COLOR_YELLOW-} ]] || COLOR_YELLOW="\e[1;33m"
[[ ${COLOR_GREEN-} ]]  || COLOR_GREEN="\e[1;32m"
[[ ${COLOR_BLUE-} ]]   || COLOR_BLUE="\e[1;34m"
[[ ${COLOR_OFF-} ]]    || COLOR_OFF="\e[0m"

declare -A levels=([DEBUG]=0 [INFO]=1 [WARN]=2 [ERROR]=3)
script_logging_level="INFO"


######################################################################################################
# function
######################################################################################################

log() {
    local log_priority=${1-}
    local log_message=${@:2}

    #check if level exists
    [[ ${levels[$log_priority]} ]] || return

    #check if level is enough
    (( ${levels[$log_priority]} < ${levels[$script_logging_level]} )) && return

    #log here
    printf '%b\n' "${log_message}"
}

function check() {
  ${kubectl} get pods,deploy >/dev/null 2>1 || (log INFO "[Error] ${COLOR_RED}Please check the configuration of kubectl.${COLOR_OFF}";exit 1)
  jq -h >/dev/null 2>1 || (log INFO "[Error] ${COLOR_RED}Please check the configuration of jq.${COLOR_OFF}";exit 1)
}

function check_parameter {
    for p in "${@}"; do 
      if [ -z ${!p-} ]; then
        log INFO "[Error] ${COLOR_RED}Not set ${p}.${COLOR_OFF}"
        exit 1
      fi
    done
}

function check_pods () {
  local pod_name=$*
  for item in ${pod_name}; do 
    local pod_data=$($kubectl get pods "$item" -o json)
    log INFO  "[Pods] ${COLOR_YELLOW}$item${COLOR_OFF}"
    log INFO  "  phase: ${COLOR_GREEN}$(echo $pod_data | jq -r .status.phase)${COLOR_OFF}"
    log INFO  "  conditions:\n$(echo $pod_data | jq -r '.status.conditions[] | select(.status != "True") | "    status=\(.status), type=\(.type), reason=\(.reason), message=\(.message)"')"
    log INFO  "  hostIP: $(echo $pod_data | jq -r .status.hostIP)"
    log DEBUG "  podIP: $(echo $pod_data | jq -r .status.podIP)"
    log DEBUG "  qosClass: $(echo $pod_data | jq -r .status.qosClass)"
    log DEBUG "  startTime: $(echo $pod_data | jq -r .status.startTime)"
    log DEBUG "  containerStatuses:\n$(echo $pod_data | jq -r .status.containerStatuses | sed 's/^/    /')"
  done
}

function check_deploy () {
  local deploy_name=$*
  local deploy_data
  deploy_data=$($kubectl get deploy $deploy_name -o json)
  if [ "$?" -ne "0" ]; then
    log INFO   "[Error] ${COLOR_RED}Get resource fail.${COLOR_OFF}"
    exit 1
  fi
  local deploy_sel=$($kubectl get --raw "$(echo $deploy_data | jq -r .metadata.selfLink)/scale" | jq -r .status.targetSelector)
  local deploy_availableReplicas=$(echo $deploy_data | jq -r .status.availableReplicas)
  local deploy_conditions=$(echo $deploy_data | jq -r '.status.conditions[] | "    status=\(.status), type=\(.type), reason=\(.reason), message=\(.message)"')
  local deploy_replicas=$(echo $deploy_data | jq -r .status.replicas)   # deploy 副本数
  local deploy_unavailableReplicas=$(echo $deploy_data | jq -r .status.unavailableReplicas)    # deploy 不可用副本数
  local deploy_updatedReplicas=$(echo $deploy_data | jq -r .status.updatedReplicas)     # deploy更新副本数 
  local deploy_observedGeneration=$(echo $deploy_data | jq -r .status.observedGeneration)     # deploy版本号

  log INFO  "[Deployment] ${COLOR_YELLOW}$deploy_name${COLOR_OFF}"
  log DEBUG "  namespace: ${namespace-}"
  log DEBUG "  selector: ${deploy_sel-}"
  log INFO  "  conditions:\n$deploy_conditions"
  log DEBUG "  replicas: ${deploy_replicas-}"
  log DEBUG "  availableReplicas: ${deploy_availableReplicas-}"
  log INFO  "  unavailableReplicas: ${deploy_unavailableReplicas-}"
  log DEBUG "  updatedReplicas: ${deploy_updatedReplicas-}"
  log DEBUG "  observedGeneration: ${deploy_observedGeneration-}"

  if [[ "${deploy_unavailableReplicas-}" != "null" &&  ${deploy_unavailableReplicas-} -gt 0 ]]; then
    deploy_pod_name=$($kubectl get pods --selector=$deploy_sel -o json | jq -r '.items[] | select( ([ .status.conditions[] | select(.status == "False" ) ] | length ) != 0) | .metadata.name')
    check_pods $deploy_pod_name
    check_result=false
  else
    log INFO  "[Deploy] Pod success."
    check_result=true
  fi
}

function usage {
    echo "Check if all pods in Kubernetes deployment are ready."
    echo
    echo "Usage: $0 [options]"
    echo 
    echo "Options:"
    echo "  -n,--namespace     Specify namespace, default is default"
    echo "  -d,--deploy        Depoyment name"
    echo "  -i,--interval      Check the deployment status interval"
    echo "  -t,--total         Total number of inspections"
    echo "  -v,--verbose       Verbose info"
    echo "  --nocolor          Do not output color"
    echo "  -h,--help          View help"
    echo
    echo
    exit
}


######################################################################################################
# main 
######################################################################################################

[ "$#" == "0" ] && usage

while [ "${1-}" != "" ]; do
    case ${1-} in
        -n | --namespace )          shift
                                    namespace=${1:-}
                                    ;;
        -d | --deploy )             shift
                                    deploy_name=${1-}
                                    ;;
        -i | --interval )           shift
                                    check_interval=${1-}
                                    ;;
        -t | --total )              shift
                                    check_num=${1-}
                                    ;;
        -v | --verbose )            script_logging_level=DEBUG
                                    ;;
        --nocolor )                 nocolor=true
                                    ;;
        -h | --help )               usage
                                    ;;
        * )                         usage
    esac
    shift
done


kubectl="kubectl --namespace $namespace"

if [ "${nocolor-}" == "true" ]; then
  COLOR_RED=""
  COLOR_YELLOW=""
  COLOR_GREEN=""
  COLOR_BLUE=""
  COLOR_OFF=""
fi

check
check_parameter deploy_name

for (( i=1; i<=check_num; i++ ))
do
   log INFO "[Number of inspections] ${COLOR_BLUE}$i${COLOR_OFF}"
   log INFO "[Time] ${COLOR_BLUE}$(date +'%Y-%m-%d %H:%M:%S')${COLOR_OFF}"
   [ $i -eq $check_num ] && script_logging_level=DEBUG
   check_deploy $deploy_name
   if [ $check_result == true ]; then
     break
   else
     log INFO "[Reuslt] ${COLOR_RED}Deployment is not ready.${COLOR_OFF}"
     [ $i -ne $check_num ] && (log INFO "[Sleep] ${check_interval}s";sleep $check_interval)
     log INFO
   fi
done

if [ $check_result == true ]; then
  log INFO "[Reuslt] ${COLOR_GREEN}Deploy success.${COLOR_OFF}"
  exit 0
else
  log INFO "[Reuslt] ${COLOR_RED}Check timeout, this time failed.${COLOR_OFF}"
  exit 1
fi
